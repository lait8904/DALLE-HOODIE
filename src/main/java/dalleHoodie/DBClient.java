package dalleHoodie;
import dalleHoodie.repository.OrdersRepository;

import java.sql.*;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

public class DBClient {
    private final String URL = "jdbc:postgresql://localhost/dalle_hoodie";
    private final String USERNAME = "postgres";
    private final String PASSWORD = "postgres";

    private Connection connection = null;
    public Connection getConnection() {
        return connection;
    }

    public DBClient(){
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("PostgreSQL JDBC Driver is not found. Include it in your library path ");
            e.printStackTrace();
            return;
        }

        try {
            this.connection = DriverManager
                    .getConnection(URL, USERNAME, PASSWORD);
        } catch (SQLException e) {
            System.out.println("Connection Failed");
            e.printStackTrace();
            return;
        }

        if (this.connection != null) {
            System.out.println("You successfully connected to database now");
        } else {
            System.out.println("Failed to make connection to database");
        }
    }

    public <T> T executeSelect(String sql, BeCheckedFunction<ResultSet, T> consumer){
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);
            T ret = null;
            if (resultSet.next())
                ret = consumer.apply(resultSet);
            resultSet.close();
            statement.close();
            return ret;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public <T> T executeUpdate(String sql, T object,
                               BeCheckedProcedure<PreparedStatement, T> inserter,
                               BeCheckedFunction2<ResultSet, T, T> idGetter) {
        try {
            int autoGeneratedKeys;
            if (idGetter == null)
                autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
            else
                autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
            PreparedStatement preparedStatement = connection.prepareStatement(
                    sql, autoGeneratedKeys);

            inserter.apply(preparedStatement, object);

            preparedStatement.executeUpdate();
            T ret = null;
            if (idGetter == null)
                ret = object;
            if (idGetter != null) {
                ResultSet resultSet = preparedStatement.getGeneratedKeys();
                if (resultSet.next()) {
                    ret = idGetter.apply(resultSet, object);
                }
                resultSet.close();
            }
            preparedStatement.close();
            return ret;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
